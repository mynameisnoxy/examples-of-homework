{
	"info": {
		"_postman_id": "79b9e16a-ada3-439a-ac41-2fece0243549",
		"name": "Homework_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19681779"
	},
	"item": [
		{
			"name": "http://162.55.220.72:5005/first",
			"request": {
				"method": "GET",
				"header": []
			},
			"response": []
		},
		{
			"name": "http://162.55.220.72:5005/user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.",
							"//2. Статус код 200",
							"pm.test(\"Статус код 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"//3. Спарсить response body в json.",
							"var respData = pm.response.json();",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)",
							"pm.test(\"Проверить, что name в ответе равно name s request\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.name).to.eql(\"Nikita\");",
							"});",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)",
							"pm.test(\"Проверить, что age в ответе равно age s request\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.age).to.eql(\"26\");",
							"});",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)",
							"pm.test(\"Проверить, что salary в ответе равно salary s request\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.salary).to.eql(40000);",
							"});",
							"//7. Спарсить request.",
							"var reqData = request.data;",
							"console.log(reqData)",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"Проверить, что name в ответе равно name s request\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(reqData.name).to.eql(jsonData.name);",
							"});",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"pm.test(\"Проверить, что age в ответе равно age s request\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(reqData.age).to.eql(jsonData.age);",
							"});",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"pm.test(\"Проверить, что salary в ответе равно salary s request\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(reqData.salary).to.include(jsonData.salary);",
							"});",
							"//11. Вывести в консоль параметр family из response.",
							"console.log(respData.family);",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)",
							"pm.test(\"Проверить что u_salary_1_5_year в ответе равно salary*4\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(reqData.salary*4).to.eql(respData.family.u_salary_1_5_year);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Nikita",
							"type": "text"
						},
						{
							"key": "age",
							"value": "26",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "40000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5006/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5006",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://162.55.220.72:5005/object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.",
							"// 2. Статус код 200",
							"pm.test(\"Статус код 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// 3. Спарсить response body в json.",
							"var responseData = pm.response.json();",
							"// 4. Спарсить request.",
							"var requestData = pm.request.url.query.toObject();",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"Проверить, что name в ответе равно name s request\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(requestData.name).to.eql(responseData.name);",
							"});",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"pm.test(\"Проверить, что age в ответе равно age s request\", function () {",
							"    pm.expect(requestData.age).to.eql(responseData.age);",
							"});",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"pm.test(\"Проверить, что age в ответе равно age s request\", function () {",
							"    pm.expect(Number(requestData.salary)).to.eql(responseData.salary);",
							"});",
							"// 8. Вывести в консоль параметр family из response.",
							"console.log(responseData.name)",
							"// 9. Проверить, что у параметра dog есть параметры name.",
							"pm.test(\"Проверить, что у параметра dog есть параметры name\", function () {",
							"    pm.expect(responseData.family.pets.dog).to.have.property('name');",
							"});",
							"// 10. Проверить, что у параметра dog есть параметры age.",
							"pm.test(\"Проверить, что у параметра dog есть параметры age\", function () {",
							"    pm.expect(responseData.family.pets.dog).to.have.property('age');",
							"});",
							"// 11. Проверить, что параметр name имеет значение Luky.",
							"pm.test(\"Проверить, что параметр name имеет значение Luky\", function () {",
							"    pm.expect(responseData.family.pets.dog.name).to.eql(\"Luky\");",
							"});",
							"// 12. Проверить, что параметр age имеет значение 4.",
							"pm.test(\"Проверить, что параметр age имеет значение 4\", function () {",
							"    pm.expect(responseData.family.pets.dog.age).to.eql(4);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5006/object_info_3?name=Nikita&age=26&salary=50000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5006",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Nikita"
						},
						{
							"key": "age",
							"value": "26"
						},
						{
							"key": "salary",
							"value": "50000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "http://162.55.220.72:5005/object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.",
							"// 2. Статус код 200",
							"pm.test(\"Статус код 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// 3. Спарсить response body в json.",
							"var responseData = pm.response.json();",
							"// 4. Спарсить request.",
							"var requestData = pm.request.url.query.toObject();",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"Проверить, что name в ответе равно name s request\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(requestData.name).to.eql(responseData.name);",
							"});",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)",
							"pm.test(\"Проверить, что age в ответе равно age из request\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(responseData.age).to.eql(Number(requestData.age));",
							"});",
							"// 7. Вывести в консоль параметр salary из request.",
							"console.log(requestData.salary)",
							"// 8. Вывести в консоль параметр salary из response.",
							"console.log(responseData.salary)",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.",
							"console.log(responseData.salary[0])",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.",
							"console.log(responseData.salary[1])",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.",
							"console.log(responseData.salary[2])",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)",
							"pm.test(\"Проверить, что 0-й элемент параметра salary равен salary из request\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(responseData.salary[0]). to. eql(Number(requestData.salary))",
							"});",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"Проверить, что 1-й элемент параметра salary равен salary*2 из request\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(Number(responseData.salary[1])). to. eql(requestData.salary*2)",
							"});",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)",
							"pm.test(\"Проверить, что 2-й элемент параметра salary равен salary*3 из request\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(Number(responseData.salary[2])). to. eql(requestData.salary*3)",
							"});",
							"// 15. Создать в окружении переменную name",
							"// 16. Создать в окружении переменную age",
							"// 17. Создать в окружении переменную salary",
							"// 18. Передать в окружение переменную name",
							"pm.environment.set(\"name\", responseData.name);",
							"// 19. Передать в окружение переменную age",
							"pm.environment.set(\"age\", responseData.age);",
							"// 20. Передать в окружение переменную salary",
							"pm.environment.set(\"salary\", responseData.salary);",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.",
							"for (i = 0; i < responseData.salary.length; i++) { console.log(responseData.salary[i])}\t\t"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Nikita&age=26&salary=50000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Nikita"
						},
						{
							"key": "age",
							"value": "26"
						},
						{
							"key": "salary",
							"value": "50000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "http://162.55.220.72:5005/user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request",
							"// 2. Вставить параметр age из окружения в age",
							"// 3. Вставить параметр name из окружения в name",
							"// 4. Отправить запрос.",
							"// 5. Статус код 200",
							"pm.test(\"Статус код 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// 6. Спарсить response body в json.",
							"var responseData = pm.response.json();",
							"// 7. Спарсить request.",
							"var requestData = request.data;",
							"// 8. Проверить, что json response имеет параметр start_qa_salary",
							"pm.test(\"Проверить, что json response имеет параметр start_qa_salary\", function () {",
							"    pm.expect(responseData).to.have.property('start_qa_salary');",
							"});",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months",
							"pm.test(\"Проверить, что json response имеет параметр qa_salary_after_6_months\", function () {",
							"    pm.expect(responseData).to.have.property('qa_salary_after_6_months');",
							"});",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months",
							"pm.test(\"Проверить, что json response имеет параметр qa_salary_after_12_months\", function () {",
							"    pm.expect(responseData).to.have.property('qa_salary_after_12_months');",
							"});",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year",
							"pm.test(\"Проверить, что json response имеет параметр qa_salary_after_1.5_year\", function () {",
							"    pm.expect(responseData).to.have.property('qa_salary_after_1.5_year');",
							"});",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years",
							"pm.test(\"Проверить, что json response имеет параметр qa_salary_after_3.5_years\", function () {",
							"    pm.expect(responseData).to.have.property('qa_salary_after_3.5_years');",
							"});",
							"// 13. Проверить, что json response имеет параметр person",
							"pm.test(\"Проверить, что json response имеет параметр person\", function () {",
							"    pm.expect(responseData).to.have.property('person');",
							"});",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)",
							"pm.test(\"Проверить, что параметр start_qa_salary равен salary из request\", function () {",
							"    pm.expect(responseData.start_qa_salary).to.have.eql(Number(requestData.salary));",
							"});",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"Проверить, что параметр qa_salary_after_6_months равен salary*2 из request\", function () {",
							"    pm.expect(responseData.qa_salary_after_6_months).to.have.eql(Number(requestData.salary*2));",
							"});",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)",
							"pm.test(\"Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request\", function () {",
							"    pm.expect(responseData.qa_salary_after_12_months).to.have.eql(Number(requestData.salary*2.7));",
							"});",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)",
							"pm.test(\"Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request\", function () {",
							"    pm.expect(responseData[\"qa_salary_after_1.5_year\"]).to.have.eql(Number(requestData.salary*3.3));",
							"});",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)",
							"pm.test(\"Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request\", function () {",
							"    pm.expect(responseData[\"qa_salary_after_3.5_years\"]).to.have.eql(Number(requestData.salary*3.8));",
							"});",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)",
							"pm.test(\"Проверить, что в параметре person, 1-й элемент из u_name равен salary из request\", function () {",
							"    pm.expect(responseData.person.u_name[1]).to.have.eql(Number(requestData.salary));",
							"});",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)",
							"pm.test(\"Проверить, что что параметр u_age равен age из request\", function () {",
							"    pm.expect(responseData.person.u_age).to.have.eql(Number(requestData.age));",
							"});",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)",
							"pm.test(\"Проверить, что параметр u_salary_5_years равен salary*4.2 из request\", function () {",
							"    pm.expect(responseData.person.u_salary_5_years).to.have.eql(Number(requestData.salary*4.2));",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Nikita",
							"type": "text"
						},
						{
							"key": "age",
							"value": "26",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "50000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}
