{
	"info": {
		"_postman_id": "79b9e16a-ada3-439a-ac41-2fece0243549",
		"name": "Homework_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//HW_2 Postman",
							"",
							"//http://162.55.220.72:5005/first",
							"//1. Отправить запрос.",
							"//2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"//3. Проверить, что в body приходит правильный string.",
							"pm.test(\"Body is correct\", function () {",
							"    pm.response.to.have.body(\"This is the first responce from server!\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"//http://162.55.220.72:5005/user_info_3",
							"//1. Отправить запрос.",
							"//2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"//3. Спарсить response body в json.",
							"var response1 = pm.response.json()",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)",
							"console.log('name from response ' + response1.name)",
							"pm.test('name from response = name from request', function() {",
							"    pm.expect(response1.name).to.eql('Nikita')",
							"     });",
							"",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)",
							"var age = response1.age",
							"console.log('age from response ' + response1.age)",
							"pm.test('age from response = age from request', function() {",
							"    pm.expect(age).to.eql('26')",
							"     });",
							"",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)",
							"var salary = response1.salary",
							"console.log('salary from response ' + response1.salary)",
							"pm.test('salary from response = salary from request', function() {",
							"    pm.expect(salary).to.eql(50000)",
							"     });",
							"// 7. Спарсить request.",
							"var request1 = request.data;",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"Check name request \", function () {",
							"    var response1 = pm.response.json();",
							"    pm.expect(response1.name).to.eql(request1.name);",
							"});",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"pm.test(\"Check age request \", function () {",
							"    var response1 = pm.response.json();",
							"    pm.expect(response1.age).to.eql(request1.age);",
							"});",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"var salary = parseInt(request1.salary)",
							"pm.test(\"Check salary request \", function () {",
							"    var response1 = pm.response.json();",
							"    pm.expect(response1.salary).to.eql(salary);",
							"});",
							"// 11. Вывести в консоль параметр family из response.",
							"console.log(response1.family);",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)",
							"pm.test(\"Check u_salary_1_5_year\", function () {",
							"    var jsonData = pm.response.json();",
							"    var req_data = request.data;",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(req_data.salary*4);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Nikita",
							"type": "text"
						},
						{
							"key": "age",
							"value": "26",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "50000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/object_info_3",
							"// 1. Отправить запрос.",
							"// 2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// 3. Спарсить response body в json.",
							"var response1 = pm.response.json();",
							"// 4. Спарсить request.",
							"var req_data = pm.request.url.query.toObject();",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"Your test name\", function () {",
							"    pm.expect(response1.name).to.eql(req_data.name);",
							"});",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"pm.test(\"Your test age\", function () {",
							"    pm.expect(response1.age).to.eql(req_data.age);",
							"});",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"var salary = +req_data.salary;",
							"pm.test(\"Your test salary\", function () {",
							"    pm.expect(salary).to.eql(response1.salary);",
							"});",
							"// 8. Вывести в консоль параметр family из response.",
							"console.log(response1.family)",
							"// 9. Проверить, что у параметра dog есть параметры name.",
							"pm.test(\"Check name dog\", function () {",
							"    pm.expect(response1.family.pets.dog).to.have.property(\"name\");",
							"});",
							"// 10. Проверить, что у параметра dog есть параметры age.",
							"pm.test(\"Check params dog\", function () {",
							"    pm.expect(response1.family.pets.dog).to.have.property(\"age\");",
							"});",
							"// 11. Проверить, что параметр name имеет значение Luky.",
							"pm.test(\"Check params name\", function () {",
							"    pm.expect(response1.family.pets.dog.name).to.be.eql(\"Luky\");",
							"});",
							"// 12. Проверить, что параметр age имеет значение 4.",
							"pm.test(\"Check params age\", function () {",
							"    pm.expect(response1.family.pets.dog.age).to.eql(4);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Nikita&age=26&salary=50000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Nikita"
						},
						{
							"key": "age",
							"value": "26"
						},
						{
							"key": "salary",
							"value": "50000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/object_info_4",
							"// 1. Отправить запрос.",
							"// 2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// 3. Спарсить response body в json.",
							"var response1 = pm.response.json();",
							"// 4. Спарсить request.",
							"var req_data = pm.request.url.query.toObject();",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"Check name from responce\", function () {",
							"    pm.expect(req_data.name).to.eql(response1.name);",
							"});",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)",
							"var age = +req_data.age",
							"pm.test(\"Check age from response\", function () {",
							"    pm.expect(age).to.eql(response1.age);",
							"});",
							"// 7. Вывести в консоль параметр salary из request.",
							"console.log(req_data.salary);",
							"// 8. Вывести в консоль параметр salary из response.",
							"console.log(response1.salary);",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.",
							"console.log(response1.salary[0]);",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.",
							"console.log(response1.salary[1]);",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.",
							"console.log(response1.salary[2]);",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)",
							"pm.test(\"check 0 element\", function () {",
							"    pm.expect(response1.salary[0]).to.eql(+req_data.salary);",
							"});",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"check 1 element\", function () {",
							"    pm.expect(+response1.salary[1]).to.eql(req_data.salary*2);",
							"});",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)",
							"pm.test(\"check 2 element\", function () {",
							"    pm.expect(+response1.salary[2]).to.eql(req_data.salary*3);",
							"});",
							"// 15. Создать в окружении переменную name",
							"// 16. Создать в окружении переменную age",
							"// 17. Создать в окружении переменную salary",
							"// 18. Передать в окружение переменную name",
							"pm.environment.set(\"name\", req_data.token);",
							"// 19. Передать в окружение переменную age",
							"pm.environment.set(\"age\", req_data.token);",
							"// 20. Передать в окружение переменную salary",
							"pm.environment.set(\"salary\", req_data.token);",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.",
							"for (let i = 0; i < response1.salary.length; i++)",
							"console.log(response1.salary[i]);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Nikita&age=26&salary=50000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Nikita"
						},
						{
							"key": "age",
							"value": "26"
						},
						{
							"key": "salary",
							"value": "50000"
						}
					]
				}
			},
			"response": []
		}
	]
}